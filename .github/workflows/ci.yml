name: Manual

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master
      - dev

jobs:
  # Combined job for formatting and linting checks
  formatting_and_linting:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Cache Python dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-
        id: cache-python

      # Log cache status
      - name: Log Cache Status
        run: |
          if [ "${{ steps.cache-python.outputs.cache-hit }}" == "true" ]; then
            echo "Cache hit: Dependencies found in the cache.";
          else
            echo "Cache miss: Installing dependencies from requirements.txt.";
          fi

      # Install dependencies (if not cached)
      - name: Install dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt

      # Run pre-commit hooks for formatting
      - name: Run pre-commit hooks for formatting
        run: |
          pre-commit run --all-files

      # Run pre-commit hooks for linting
      - name: Run pre-commit hooks for linting
        run: |
          pre-commit run --all-files

  # Job for server healthcheck
  healthcheck:
    runs-on: ubuntu-latest
    needs: formatting_and_linting  # Ensure healthcheck runs after formatting and linting
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Restore cached dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-
        id: cache-python

      # Log cache status
      - name: Log Cache Status
        run: |
          if [ "${{ steps.cache-python.outputs.cache-hit }}" == "true" ]; then
            echo "Cache hit: Dependencies found in the cache.";
          else
            echo "Cache miss: Installing dependencies from requirements.txt.";
          fi

      # Install dependencies (if not cached)
      - name: Install dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt

      # Start the server in the background
      - name: Start server
        run: |
          bash entrypoint.sh &
          sleep 10  # Wait for the server to start (adjust if needed)

      # Check the /ping endpoint to ensure the server is up
      - name: Check ping endpoint
        run: |
          curl --fail http://localhost:8080/ping
