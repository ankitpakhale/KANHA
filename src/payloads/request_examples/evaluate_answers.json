[
    {
        "q_id": "psq01223211122",
        "problem_description": "Write a Python function that takes a list of integers and returns the maximum product of three numbers from the list. The function should handle both positive and negative integers.",
        "input_format": "Input consists of a list of integers.",
        "output_format": "Output should be an integer representing the maximum product of three numbers.",
        "constraints": "The length of the list will be at least 3 and at most 10^4. Integers in the list will be in the range [-1000, 1000].",
        "examples": [
            {
                "input": "[1, 2, 3, 4, 5]",
                "output": "60"
            },
            {
                "input": "[-10, -5, 1, 2, 3]",
                "output": "150"
            }
        ],
        "edge_cases": [
            {
                "input": "[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]",
                "output": "125"
            }
        ],
        "user_code": "def max_product(nums):\n    nums.sort()\n    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])"
    },
    {
        "q_id": "psq01293211122",
        "problem_description": "Implement a Python function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string.",
        "input_format": "Input consists of an array of strings.",
        "output_format": "Output should be a string representing the longest common prefix.",
        "constraints": "The number of strings in the array will be at least 1 and at most 200. The length of each string will be at most 200.",
        "examples": [
            {
                "input": "[\"flower\", \"flow\", \"flight\"]",
                "output": "\"fl\""
            },
            {
                "input": "[\"dog\", \"racecar\", \"car\"]",
                "output": "\"\""
            }
        ],
        "edge_cases": [
            {
                "input": "[\"apple\", \"app\", \"application\"]",
                "output": "\"app\""
            }
        ],
        "user_code": "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    \n    # Start by assuming the first string is the prefix\n    prefix = strs[0]\n    \n    # Loop through the strings\n    for string in strs[1:]:\n        # Update the prefix while it's not a prefix of the current string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    \n    return prefix"
    }
]
